openapi: 3.0.0
info:
  title: Echo API
  version: '1.0'
  contact:
    name: Peter Birkholm-Buch
    url: 'https://birkholm-buch.dk'
    email: peterbb@gmail.com
  description: Manage your messages!
servers:
  - url: 'https://stoplight.io/mocks/peterbb/lambda-echo/7454164'
paths:
  '/echo/{id}':
    get:
      summary: Get message by id
      tags: []
      operationId: get-echo
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message'
              examples:
                example:
                  value:
                    id: 0
                    message: string
          headers: {}
        '':
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                  message:
                    type: string
                    minLength: 1
                required:
                  - id
                  - message
      description: Returns a message by id
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    x-amazon-apigateway-any-method:
      parameters:
        - name: proxy
          in: path
          required: true
          schema:
            type: string
      x-amazon-apigateway-integration:
        uri: 'http://cadi.dev.be:2202/resources/translations/{proxy}'
        httpMethod: ANY
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.path.proxy: method.request.path.proxy
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        connectionId: bdaqzv
        cacheNamespace: 005uqx
        cacheKeyParameters:
          - method.request.path.proxy
        type: http_proxy
    post:
      summary: Post new message
      operationId: post-echo-id
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                message:
                  type: string
                  minLength: 1
              required:
                - message
    put:
      summary: Update message
      operationId: put-echo-id
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                id:
                  type: string
                  minLength: 1
                message:
                  type: string
                  minLength: 1
              required:
                - id
                - message
    delete:
      summary: ''
      operationId: delete-echo-id
      responses:
        '200':
          description: OK
  /echo:
    get:
      summary: Get all messages
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/message'
      operationId: get-echo
components:
  schemas:
    message:
      description: The Echo Message
      type: object
      properties:
        id:
          type: integer
          minimum: 1
          readOnly: true
        message:
          type: string
      required:
        - id
        - message
